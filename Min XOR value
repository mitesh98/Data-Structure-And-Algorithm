Given an integer array A of N integers, find the pair of integers in the array which have minimum XOR value. Report the minimum XOR value. Input Format:
    First and only argument of input contains an integer array A
Output Format:
    return a single integer denoting minimum xor value
Constraints:
2 <= N <= 100 000  
0 <= A[i] <= 1 000 000 000
For Examples :
Example Input 1:
    A = [0, 2, 5, 7]
Example Output 1:
    2
Explanation:
    0 xor 2 = 2
Example Input 2:
    A = [0, 4, 7, 9]
Example Output 2:
    3
    

===============================Solution By Mitesh Kumar===============================

int Solution::findMinXor(vector<int> &A) {
    sort(A.begin(),A.end());
    int max=INT_MAX;
    for(int i=1;i<A.size();i++)
    {
        int m=A[i]^A[i-1];
        if(m<max)
            max=m;
    }
    return(max);
}

===============================Solution By Mitesh Kumar Using Trie===============================

#include<bits/stdc++.h>
struct Node
{
    Node* child[2];
    Node(char ch)
    {
        child[0]=NULL;
        child[1]=NULL;
    }
};
void insert(Node* parent,string binary)
{
    for(int i=0;i<32;i++)
    {
        char ch=binary[i];
        if(binary[i]=='0')
        {
            if(parent->child[0]==NULL)
            {
                Node* branch=new Node(ch);
                parent->child[0]=branch;
            }
            parent=parent->child[0];
        }
        else if(binary[i]=='1')
        {
            if(parent->child[1]==NULL)
            {
                Node* branch=new Node(ch);
                parent->child[1]=branch;
            }
            parent=parent->child[1];
        }
        
    }
}
int min_xor(Node* parent,string binary)
{
    string s="";
    for(int i=0;i<32;i++)
    {
        if(binary[i]=='0')
        {
            if(parent->child[0]!=NULL)
            {
                s.push_back('0');
                parent=parent->child[0];
            }
            else
            {
                s.push_back('1');
                parent=parent->child[1];
            }
        }
        else if(binary[i]=='1')
        {
            if(parent->child[1]!=NULL)
            {
                s.push_back('0');
                parent=parent->child[1];
            }
            else
            {
                s.push_back('1');
                parent=parent->child[0];
            }
        }
    }
    int number = stoi(s, 0, 2);
    return(number);
}
void deleteTrie(Node* parent)
{
    if(parent==NULL)
        return;
    deleteTrie(parent->child[0]);
    deleteTrie(parent->child[1]);
    delete parent;
}
int Solution::findMinXor(vector<int> &A) {
    int res=INT_MAX;
    Node* root=new Node('A');
    string binary =bitset<32>(A[0]).to_string();
    insert(root,binary);
    for(int i=1;i<A.size();i++)
    {
        string binary =bitset<32>(A[i]).to_string();
        int x=min_xor(root,binary);
        if(x<res)
            res=x;
        insert(root,binary);
    }
    deleteTrie(root);
    return(res);
}
