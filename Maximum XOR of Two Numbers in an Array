Maximum XOR of Two Numbers in an Array
Given an array of integers A, find and return the maximum result of A[i] XOR A[j], where i, j are the indexes of the array. 
Input Format
The only argument given is the integer array A.
Output Format
Return the maximum result of A[i] XOR A[j].
Constraints
1 <= length of the array <= 100000
0 <= A[i] <= 10^9 
For Example
Input 1:
    A = [1, 2, 3, 4, 5]
Output 1:
    7

Input 2:
    A = [5, 17, 100, 11]
Output 2:
    117

==============Solution by Mitesh Kumar=========================

#include<bits/stdc++.h>
struct Node
{
    int val;
    Node *child[2];
    Node(char ch)
    {
        val=(int)ch;
        child[0]=NULL;
        child[1]=NULL;
    }
};
void insert(Node* parent,string str )
{
    int n=str.length();
    for(int i=0;i<n;i++)
    {
        char ch=str[i];
        if(ch=='0')
        {
            if(parent->child[0]==NULL)
            {
                Node* branch=new Node(ch);
                parent->child[0]=branch;
            }
                parent=parent->child[0];
        }
        if(ch=='1')
        {
            if(parent->child[1]==NULL)
            {
                Node* branch=new Node(ch);
                parent->child[1]=branch;
            }
            parent=parent->child[1];
        }
    }
}
int max_xor(Node* parent,string binary)
{
    string res="";
    for(int i=0;i<32;i++)
    {
        char ch=binary[i];
        if(ch=='0')
        {
            if(parent->child[0]!=NULL)
            {
                res.push_back('1');
                parent=parent->child[0];
            }
            else
            {
                res.push_back('0');
                parent=parent->child[1];
            }
        }
        else if(ch=='1')
        {
            if(parent->child[1]!=NULL)
            {
                res.push_back('1');
                parent=parent->child[1];
            }
            else
            {
                res.push_back('0');
                parent=parent->child[0];
            }
        }
    }
    int number = stoi(res, 0, 2);
    return(number);
}
void deleteTrie(Node* parent)
{
    if(parent==NULL)
        return;
    deleteTrie(parent->child[0]);
    deleteTrie(parent->child[1]);
    
    delete parent;
}
int Solution::solve(vector<int> &A)
{
    
    int n=A.size();
    int ans=INT_MIN;
    Node* root=new Node(-1);
    //Insert A[0]
    string binary =bitset<32>(A[0]).to_string();
    insert(root,binary);
    for(int i=1;i<n;i++)
    {
        string binary =bitset<32>(A[i]).to_string();
        
        for(int i=0;i<32;i++) //Toggle each bit
        { 
            if(binary[i]=='0')
                binary[i]='1';
            else
                binary[i]='0';
            
        }
        int x=max_xor(root,binary);
        if(x>ans)
            ans=x;
        binary =bitset<32>(A[i]).to_string();
        insert(root,binary);
    }
    deleteTrie(root);
    return(ans);
}
