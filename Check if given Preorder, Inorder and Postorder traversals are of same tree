Check if given Preorder, Inorder and Postorder traversals are of same tree
Given 3 array of integers A, B and C. A represents preorder traversal of a binary tree. B represents inorder traversal of a binary tree. C represents postorder traversal of a binary tree. Check whether these tree traversals are of the same tree or not. If they are of same tree return 1 else return 0. 
Input Format
The arguments given are integer arrays A, B, and C.
Output Format
Return 1 if they are of same tree else return 0.
Constraints
1 <= length of the array <= 1000
all arrays are of same length
1 <= A[i], B[i], C[i] <= 10^9 
For Example
Input 1:
    A = [1, 2, 4, 5, 3]
    B = [4, 2, 5, 1, 3]
    C = [4, 5, 2, 3, 1]
Output 1:
    1

Input 2:
    A = [1, 5, 4, 2, 3]
    B = [4, 2, 5, 1, 3]
    C = [4, 1, 2, 3, 5]

Output 2:
    0
    
  ================================Solution By Mitesh Kumar=======================================================
  
  unordered_map<int,int>getIndex;
TreeNode* building(vector<int> &post, vector<int> &in,int low,int high,int &pIndex)
{
    if(low>high)
        return(NULL);
    if(pIndex<0)
    {
        return(NULL);
    }
    int data=post[pIndex];
    TreeNode* Node=new TreeNode(data);
    (pIndex)--;
    if(low==high)
        return(Node);
    if(getIndex.find(data)==getIndex.end())
        return(NULL);
    int index=getIndex[data];
    Node->right=building(post,in,index+1,high,pIndex);
    Node->left=building(post,in,low,index-1,pIndex);
   
    return(Node);
}
void preorder(TreeNode *root,vector<int>&v)
{
    if(root==NULL)
        return;
    v.push_back(root->val);
    preorder(root->left,v);
    preorder(root->right,v);
}
int Solution::solve(vector<int> &pre, vector<int> &in, vector<int> &post) {
    getIndex.clear();
    if(pre.size()!=in.size()||pre.size()!=post.size()||post.size()!=in.size())
        return(0);
    int len=in.size();
    for(int i=0;i<len;i++)
        getIndex[in[i]]=i;
    int pIndex=len-1;
    TreeNode* root=building(post,in,0,len-1,pIndex);
    vector<int>res;
    preorder(root,res);
    int i;
    if(res.size()!=pre.size())
        return(0);
    for(i=0;i<res.size()&&i<pre.size();i++)
    {
        if(res[i]!=pre[i])
            return(0);
    }
    return(1);
}
