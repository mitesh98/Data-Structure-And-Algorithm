
A message containing letters from A-Z is being encoded to numbers using the following mapping:
'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it. 
Input Format:
The first and the only argument is a string A.
Output Format:
Return an integer, representing the number of ways to decode the string.
Constraints:
1 <= length(A) <= 1e5
Example :
Input 1:
    A = "8"

Output 1:
    1

Explanation 1:
    Given encoded message "8", it could be decoded as only "H" (8).

    The number of ways decoding "8" is 1.

Input 2:
    A = "12"

Output 2:
    2

Explanation 2:
    Given encoded message "12", it could be decoded as "AB" (1, 2) or "L" (12).

    The number of ways decoding "12" is 2.
Ã— You only need to implement the given function. Do not read input, instead use the arguments to the function. Do not print the output, instead return values as specified. Still have a doubt? Checkout Sample Codes for more details.


================================Solution By Mitesh Kumar====================================================
int Solution::numDecodings(string A) {
    int n=A.length();
    int arr[n];
    if(A[0]=='0')
        return(0);
    arr[0]=1;
    if(n>1)
    {
        int x=(A[0]-'0')*10+(A[1]-'0');
        if(A[1]=='0'&&x>0&&x<=26)
            arr[1]=1;
        else if(A[1]=='0'&&(x<1||x>26))
           return(0);
        else if(x>0&&x<=26)
            arr[1]=2;
        else
            arr[1]=1;
    }
    for(int i=2;i<n;i++)
    {
        
        int x=(A[i-1]-'0')*10+(A[i]-'0');
        if(A[i]=='0'&&x>0&&x<=26)
            arr[i]=arr[i-2];
        else if(A[i]=='0'&&(x<1||x>26))
           return(0);
        else if(x<=26&&A[i-1]!='0')
            arr[i]=arr[i-2]+arr[i-1];
        else
            arr[i]=arr[i-1];
      
    }
    return(arr[n-1]);
}
