
Given an inorder traversal of a cartesian tree, construct the tree.
 Cartesian tree : is a heap ordered binary tree, where the root is greater than all the elements in the subtree. Note: You may assume that duplicates do not exist in the tree. 
Example :
Input : [1 2 3]

Return :   
          3
         /
        2
       /
      1
======================================Solution By Mitesh Kumar================================================

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
int get_max(vector<int> &A,int low,int high)
{
    int index=low;
    for( int i=low+1;i<=high;i++)
    {
        if(A[i]>A[index])
        {
            index=i;
        }
    }
    return(index);
    
}
TreeNode* build_Tree(vector<int> &A,int low,int high)
{
    int n=A.size()-1;
    if(low>high||high>n||low>n)
    {
        return(NULL);
    }
    int max_at_index=get_max(A,low,high);
   // cout<<max_at_index<<" ";
    TreeNode* Node=new TreeNode(A[max_at_index]);
    Node->left=build_Tree(A,low,max_at_index-1);
    Node->right=build_Tree(A,max_at_index+1,high);
    return(Node);
}
TreeNode* Solution::buildTree(vector<int> &A) {
   int high=A.size()-1;
    TreeNode* root= build_Tree(A,0,high);
    return(root);
}
