Black Shapes
Given N x M character matrix A of O's and X's, where O = white, X = black.
Return the number of black shapes. A black shape consists of one or more adjacent X's (diagonals not included) 
Input Format:
    The First and only argument is a N x M character matrix.
Output Format:
    Return a single integer denoting number of black shapes.
Constraints:
    1 <= N,M <= 1000
    A[i][j] = 'X' or 'O'
Example:
Input 1:
    A = [ OOOXOOO
          OOXXOXO
          OXOOOXO  ]
Output 1:
    3
Explanation:
    3 shapes are  :
    (i)    X
         X X
    (ii)
          X
    (iii)
          X
          X
Note: we are looking for connected shapes here.
XXX
XXX
XXX
============================Solution By Mitesh Kumar==========================================
int ans;
int rows[4];
int cols[4];
void initialize_row_col()
{
   rows[0]=0;     rows[1]=0;     rows[2]=1;    rows[3]=-1; 
   cols[0]=-1;    cols[1]=1;     cols[2]=0;     cols[3]=0;
  
}
int i_j_into_pos(int i,int j,int n_cols)
{
    return((i*n_cols)+j);
}
vector<pair<int,int>> find_top_btm_left_right(int pos_i,int pos_j,int n_rows,int n_cols)
{
   vector<pair<int,int>>v;
   for(int i=0;i<4;i++)
   {
      int x=pos_i+rows[i];
      int y=pos_j+cols[i];
      if(x>=0&&x<n_rows&&y>=0&&y<n_cols)
         v.push_back(make_pair(x,y));
   }
   return(v);
}

void BFS(vector<string> &A,int which_row,int which_col, vector<bool>&visited) 
{
   int n_rows=A.size();
   int n_cols=A[0].size();
   queue<int>q;
   int pos=i_j_into_pos(which_row,which_col,n_cols);
   q.push(pos);
   visited[pos]=true;
   while(q.empty()==false)
   {
      int pos=q.front();
      int pos_i=pos/n_cols;
      int pos_j=pos%n_cols;
      vector<pair<int,int>>adj=find_top_btm_left_right(pos_i,pos_j,n_rows,n_cols);
      for(int i=0;i<adj.size();i++)
      {
         int x=adj[i].first;
         int y=adj[i].second;
         int pos=i_j_into_pos(x,y,n_cols);
         if(A[x][y]=='X'&&visited[pos]==false)
         {
               q.push(pos);
               visited[pos]=true;
         }
      }
      q.pop();
   }
}
int Solution::black(vector<string> &A)
{
   initialize_row_col();
   ans=0;
   int n_rows=A.size();
   int n_cols=A[0].size();
   vector<bool>visited(n_rows*n_cols,false);
   for(int i=0;i<n_rows;i++)
   {
      for(int j=0;j<n_cols;j++)
      {
         if(A[i][j]=='X')
         {
            int pos=i_j_into_pos(i,j,n_cols);
            if(visited[pos]==false)
            {
               // cout<<i<<" "<<j<<", ";
               BFS(A,i,j,visited);
               ans++;
            }
         }
         
      }
   }
  
   return(ans);
}


